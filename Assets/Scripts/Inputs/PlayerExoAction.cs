//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Scripts/Inputs/PlayerExoAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerExoAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerExoAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerExoAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fc79122e-a8d3-4ba7-aa98-3a51e90330fd"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c1be3100-d1b9-440a-894b-bd8152ebcebd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Moment"",
                    ""type"": ""Value"",
                    ""id"": ""9784e01d-6fbb-46c4-b7ec-5a225f21a8d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Manipulation"",
                    ""type"": ""Button"",
                    ""id"": ""3a7e0ab0-1c53-4d87-914b-b6c981758b85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hologramup"",
                    ""type"": ""Button"",
                    ""id"": ""2ae01f5d-460c-4108-99ee-b9886fbb1f3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HologramDown"",
                    ""type"": ""Button"",
                    ""id"": ""8457ed77-2e8f-446d-842b-f915eeef035b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HologramLeft"",
                    ""type"": ""Button"",
                    ""id"": ""8b937bcb-ed99-4279-affa-0a17aeaf9d88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HologramRight"",
                    ""type"": ""Button"",
                    ""id"": ""91aefc64-427b-4990-8e24-04d06f152e1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b338ce46-ae2e-4660-9bf1-472cca856e39"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""0b6f68f8-0942-41de-bfc0-c5b16ab0eaf9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2338f6e2-b351-4e04-a507-66844f5d26dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1070aa5a-638b-47c9-9780-3e355d22c005"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""efb5c4c3-16bb-4294-8f25-54dcf0fc3ef3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""15c4dbd0-3709-457e-98fd-2ed64c557c17"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08163846-c244-43e4-b54d-61ac6185c0b5"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94cd43f8-f8ea-455e-a5b1-afc55b1ecacf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hologramup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25167226-29dc-4a28-9815-930041796cdb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HologramLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a068bc92-d6f9-4d7b-bbe3-fed5812a9c9a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HologramDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ae13f36-2f4b-49eb-8ee2-db629f27b4fe"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HologramRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Moment = m_Player.FindAction("Moment", throwIfNotFound: true);
        m_Player_Manipulation = m_Player.FindAction("Manipulation", throwIfNotFound: true);
        m_Player_Hologramup = m_Player.FindAction("Hologramup", throwIfNotFound: true);
        m_Player_HologramDown = m_Player.FindAction("HologramDown", throwIfNotFound: true);
        m_Player_HologramLeft = m_Player.FindAction("HologramLeft", throwIfNotFound: true);
        m_Player_HologramRight = m_Player.FindAction("HologramRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Moment;
    private readonly InputAction m_Player_Manipulation;
    private readonly InputAction m_Player_Hologramup;
    private readonly InputAction m_Player_HologramDown;
    private readonly InputAction m_Player_HologramLeft;
    private readonly InputAction m_Player_HologramRight;
    public struct PlayerActions
    {
        private @PlayerExoAction m_Wrapper;
        public PlayerActions(@PlayerExoAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Moment => m_Wrapper.m_Player_Moment;
        public InputAction @Manipulation => m_Wrapper.m_Player_Manipulation;
        public InputAction @Hologramup => m_Wrapper.m_Player_Hologramup;
        public InputAction @HologramDown => m_Wrapper.m_Player_HologramDown;
        public InputAction @HologramLeft => m_Wrapper.m_Player_HologramLeft;
        public InputAction @HologramRight => m_Wrapper.m_Player_HologramRight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Moment.started += instance.OnMoment;
            @Moment.performed += instance.OnMoment;
            @Moment.canceled += instance.OnMoment;
            @Manipulation.started += instance.OnManipulation;
            @Manipulation.performed += instance.OnManipulation;
            @Manipulation.canceled += instance.OnManipulation;
            @Hologramup.started += instance.OnHologramup;
            @Hologramup.performed += instance.OnHologramup;
            @Hologramup.canceled += instance.OnHologramup;
            @HologramDown.started += instance.OnHologramDown;
            @HologramDown.performed += instance.OnHologramDown;
            @HologramDown.canceled += instance.OnHologramDown;
            @HologramLeft.started += instance.OnHologramLeft;
            @HologramLeft.performed += instance.OnHologramLeft;
            @HologramLeft.canceled += instance.OnHologramLeft;
            @HologramRight.started += instance.OnHologramRight;
            @HologramRight.performed += instance.OnHologramRight;
            @HologramRight.canceled += instance.OnHologramRight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Moment.started -= instance.OnMoment;
            @Moment.performed -= instance.OnMoment;
            @Moment.canceled -= instance.OnMoment;
            @Manipulation.started -= instance.OnManipulation;
            @Manipulation.performed -= instance.OnManipulation;
            @Manipulation.canceled -= instance.OnManipulation;
            @Hologramup.started -= instance.OnHologramup;
            @Hologramup.performed -= instance.OnHologramup;
            @Hologramup.canceled -= instance.OnHologramup;
            @HologramDown.started -= instance.OnHologramDown;
            @HologramDown.performed -= instance.OnHologramDown;
            @HologramDown.canceled -= instance.OnHologramDown;
            @HologramLeft.started -= instance.OnHologramLeft;
            @HologramLeft.performed -= instance.OnHologramLeft;
            @HologramLeft.canceled -= instance.OnHologramLeft;
            @HologramRight.started -= instance.OnHologramRight;
            @HologramRight.performed -= instance.OnHologramRight;
            @HologramRight.canceled -= instance.OnHologramRight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMoment(InputAction.CallbackContext context);
        void OnManipulation(InputAction.CallbackContext context);
        void OnHologramup(InputAction.CallbackContext context);
        void OnHologramDown(InputAction.CallbackContext context);
        void OnHologramLeft(InputAction.CallbackContext context);
        void OnHologramRight(InputAction.CallbackContext context);
    }
}
